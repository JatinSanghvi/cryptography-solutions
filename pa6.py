import gmpy2

N = gmpy2.mpz('17976931348623159077293051907890247336179769789423065727343008115'
    '77326758055056206869853794492129829595855013875371640157101398586'
    '47833778606925583497541085196591615128057575940752635007475935288'
    '71082364994994077189561705436114947486504671101510156394068052754'
    '0071584560878577663743040086340742855278549092581')

A = gmpy2.isqrt(N) + 1
x = gmpy2.isqrt(A * A - N)
(p, q) = (A - x, A + x)
print gmpy2.f_divmod(N, p) == (q, 0), ':', p


N = gmpy2.mpz('6484558428080716696628242653467722787263437207069762630604390703787'
    '9730861808111646271401527606141756919558732184025452065542490671989'
    '2428844841839353281972988531310511738648965962582821502504990264452'
    '1008852816733037111422964210278402893076574586452336833570778346897'
    '15838646088239640236866252211790085787877')

A0 = gmpy2.isqrt(N) + 1
for i in range(0, 2 ** 20):
    A = A0 + i
    x = gmpy2.isqrt(A * A - N)
    (p, q) = (A - x, A + x)
    if gmpy2.f_mod(N, p) == 0:
        print gmpy2.f_divmod(N, p) == (q, 0), ':', p
        break


N = gmpy2.mpz('72006226374735042527956443552558373833808445147399984182665305798191'
    '63556901883377904234086641876639384851752649940178970835240791356868'
    '77441155132015188279331812309091996246361896836573643119174094961348'
    '52463970788523879939683923036467667022162701835329944324119217381272'
    '9276147530748597302192751375739387929')

# Since (3p + 2q) is an odd number, A = (3p + 2q) / 2 will not be an integer. Hence work with 2A and 2x instead.
# One of the following two solutions are correct, both will have p < q:
#   p = (A - x) / 3, q = (A + x) / 2
#   p = (A - x) / 3, q = (A + x) / 2

A2 = gmpy2.isqrt(24 * N) + 1
x2 = gmpy2.isqrt((A2 * A2) - 24 * N)
(p, q) = ((A2 - x2) / 6, (A2 + x2) / 4)
print gmpy2.f_divmod(N, p) == (q, 0), ':', p
(p, q) = ((A2 + x2) / 6, (A2 - x2) / 4)
print gmpy2.f_divmod(N, p) == (q, 0), ':', p


N = gmpy2.mpz('17976931348623159077293051907890247336179769789423065727343008115'
    '77326758055056206869853794492129829595855013875371640157101398586'
    '47833778606925583497541085196591615128057575940752635007475935288'
    '71082364994994077189561705436114947486504671101510156394068052754'
    '0071584560878577663743040086340742855278549092581')

A = gmpy2.isqrt(N) + 1
x = gmpy2.isqrt(A * A - N)
(p, q) = (A - x, A + x)
e = 65537
d = gmpy2.invert(e, (p - 1) * (q - 1))

c = gmpy2.mpz('22096451867410381776306561134883418017410069787892831071731839143'
    '67613560012053800428232965047350942434394621975151225646583996794'
    '28894607645420405815647489880137348641204523252293201764879166664'
    '02997509188729971690526083222067771600019329260870009579993724077'
    '458967773697817571267229951148662959627934791540')

m = gmpy2.powmod(c, d, N).digits(16)
print m[m.find('00') + 2:].decode('hex')
